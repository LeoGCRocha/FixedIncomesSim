// <auto-generated />
using System;
using FixedIncome.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FixedIncome.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250513203515_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("fixed_incomes")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FixedIncome.Application.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime>("OccuredOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("outbox_message", "fixed_incomes");
                });

            modelBuilder.Entity("FixedIncome.Domain.FixedIncomeSimulation.FixedIncomeBalances.FixedIncomeBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("FixedIncomeSimId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Profit")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ReferenceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("FixedIncomeSimId");

                    b.ToTable("fixed_income_balance", "fixed_incomes");
                });

            modelBuilder.Entity("FixedIncome.Domain.FixedIncomeSimulation.FixedIncomeOrders.FixedIncomeOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal>("CurrentAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("FixedIncomeSimId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("MonthlyYield")
                        .HasColumnType("numeric");

                    b.Property<decimal>("StartAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Tax")
                        .HasColumnType("numeric");

                    b.Property<int>("TaxGroup")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("FixedIncomeSimId");

                    b.ToTable("fixed_income_order", "fixed_incomes");
                });

            modelBuilder.Entity("FixedIncome.Domain.FixedIncomeSimulation.FixedIncomeOrders.FixedIncomeOrderEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("EndReferenceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("FixedIncomeOrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("MonthlyYield")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Profit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("StartAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartReferenceDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("FixedIncomeOrderId");

                    b.ToTable("fixed_income_order_event", "fixed_incomes");
                });

            modelBuilder.Entity("FixedIncome.Domain.FixedIncomeSimulation.FixedIncomeSim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("FinalGrossAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("FinalNetAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("InvestedAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MonthlyContribution")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MonthlyYield")
                        .HasColumnType("numeric");

                    b.Property<decimal>("StartAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("StartDate");

                    b.ToTable("fixed_income_simulation", "fixed_incomes");
                });

            modelBuilder.Entity("FixedIncome.Domain.FixedIncomeSimulation.FixedIncomeBalances.FixedIncomeBalance", b =>
                {
                    b.HasOne("FixedIncome.Domain.FixedIncomeSimulation.FixedIncomeSim", null)
                        .WithMany("_balances")
                        .HasForeignKey("FixedIncomeSimId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FixedIncome.Domain.FixedIncomeSimulation.FixedIncomeOrders.FixedIncomeOrder", b =>
                {
                    b.HasOne("FixedIncome.Domain.FixedIncomeSimulation.FixedIncomeSim", null)
                        .WithMany("_orders")
                        .HasForeignKey("FixedIncomeSimId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FixedIncome.Domain.FixedIncomeSimulation.FixedIncomeOrders.FixedIncomeOrderEvent", b =>
                {
                    b.HasOne("FixedIncome.Domain.FixedIncomeSimulation.FixedIncomeOrders.FixedIncomeOrder", null)
                        .WithMany("_events")
                        .HasForeignKey("FixedIncomeOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FixedIncome.Domain.FixedIncomeSimulation.FixedIncomeSim", b =>
                {
                    b.OwnsOne("FixedIncome.Domain.Common.ValueObjects.InvestmentInformation", "Information", b1 =>
                        {
                            b1.Property<Guid>("FixedIncomeSimId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("InvestmentTitle");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("InformationType");

                            b1.HasKey("FixedIncomeSimId");

                            b1.ToTable("fixed_income_simulation", "fixed_incomes");

                            b1.WithOwner()
                                .HasForeignKey("FixedIncomeSimId");
                        });

                    b.Navigation("Information")
                        .IsRequired();
                });

            modelBuilder.Entity("FixedIncome.Domain.FixedIncomeSimulation.FixedIncomeOrders.FixedIncomeOrder", b =>
                {
                    b.Navigation("_events");
                });

            modelBuilder.Entity("FixedIncome.Domain.FixedIncomeSimulation.FixedIncomeSim", b =>
                {
                    b.Navigation("_balances");

                    b.Navigation("_orders");
                });
#pragma warning restore 612, 618
        }
    }
}
